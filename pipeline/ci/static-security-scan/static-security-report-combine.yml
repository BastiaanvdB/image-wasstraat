combine-static-security-reports:
  stage: static security scan report combine
  needs:
    - process-trivy
    - process-clair
    - process-grype
  image: quay.io/bastiaanvanderbijl/python:3.12.3-slim
  script:
    - pip install pandas
    - |
      python - <<EOF
      import json
      import pandas as pd
      from collections import defaultdict

      def load_json_report(file_path):
          with open(file_path) as f:
              return json.load(f)

      # Load the processed reports
      grype_data = load_json_report('reports/processed_grype_report.json')
      clair_data = load_json_report('reports/processed_clair_report.json')
      trivy_data = load_json_report('reports/processed_trivy_report.json')

      # Combine all data
      all_data = grype_data + clair_data + trivy_data

      # Merge data by CVE ID, ensuring no duplicates
      merged_data = defaultdict(dict)
      for entry in all_data:
          cve_id = entry['CVE ID']
          if cve_id in merged_data:
              for key, value in entry.items():
                  if key == 'Found by Scanner':
                      merged_data[cve_id][key] = list(set(merged_data[cve_id][key] + value))
                  elif not merged_data[cve_id].get(key) or merged_data[cve_id][key] in ['', 'unknown', 'Unknown']:
                      merged_data[cve_id][key] = value
          else:
              merged_data[cve_id] = entry

      # Convert to list for DataFrame
      merged_data_list = list(merged_data.values())

      # Create dataframe
      df_combined = pd.DataFrame(merged_data_list)

      # Convert combined dataframe to JSON
      combined_json = df_combined.to_json(orient='records', indent=4)

      # Save to a file
      output_path = 'reports/combined_cve_report.json'
      with open(output_path, 'w') as f:
          f.write(combined_json)

      EOF
  artifacts:
    paths:
      - reports/combined_cve_report.json
  dependencies:
    - process-grype
    - process-clair
    - process-trivy
  allow_failure: true

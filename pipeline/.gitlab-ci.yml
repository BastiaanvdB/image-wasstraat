stages:
  - initialize
  - static security scan
  - static security scan report process
  - static security scan report combine
  - sbom scan
  - sbom report process
  - sbom report combine
  - dockle scan
  - dockle report process
  - dockle report combine
  - final combine

default:
  image: docker:26.1.3
  services:
    - name: docker:26.1.3-dind
      alias: docker-dind

variables:
  IMAGE_NAME: $CI_REGISTRY_IMAGE
  IMAGE_TAG: $CI_COMMIT_SHORT_SHA
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: tcp://docker-dind:2375/
  DOCKER_DRIVER: overlay2

# Initialization stage
initialize-job:
  stage: initialize
  script:
    - echo "Hello, World!"

# Static security scan
grype-scan:
  stage: static security scan
  needs: [initialize-job]
  services:
    - name: docker:26.1.3-dind
      alias: docker-dind-grype
  variables:
    DOCKER_HOST: tcp://docker-dind-grype:2375/
  script:
    - mkdir -p reports
    - docker run --rm quay.io/bastiaanvanderbijl/grype $IMAGE_NAME:$IMAGE_TAG -o json > reports/grype-report.json
  artifacts:
    paths:
      - reports/
  allow_failure: true

clair-scan:
  stage: static security scan
  needs: [initialize-job]
  services:
    - name: docker:26.1.3-dind
      alias: docker-dind-clair
  variables:
    DOCKER_HOST: tcp://docker-dind-clair:2375/
  script:
    - mkdir -p reports
    - docker run --rm quay.io/bastiaanvanderbijl/clairctl-debian report --out json --host http://172.20.0.5:6060 $IMAGE_NAME:$IMAGE_TAG > reports/clair-report.json
  artifacts:
    paths:
      - reports/
  allow_failure: true

trivy-scan:
  stage: static security scan
  needs: [initialize-job]
  services:
    - name: docker:26.1.3-dind
      alias: docker-dind-trivy
  variables:
    DOCKER_HOST: tcp://docker-dind-trivy:2375/
  script:
    - mkdir -p reports
    - docker run --rm quay.io/bastiaanvanderbijl/trivy image $IMAGE_NAME:$IMAGE_TAG -f json > reports/trivy-report.json
  artifacts:
    paths:
      - reports/
  allow_failure: true

process-grype:
  stage: static security scan report process
  needs: [grype-scan]
  image: quay.io/bastiaanvanderbijl/python:3.12.3-slim
  script:
    - pip install pandas
    - |
      python - <<EOF
      import json
      import pandas as pd

      def load_json_report(file_path):
          with open(file_path) as f:
              return json.load(f)

      # Load the Grype report
      grype_report = load_json_report('reports/grype-report.json')

      # Process Grype report
      grype_vulns = grype_report['matches']
      grype_data = []
      for match in grype_vulns:
          vuln = match['vulnerability']
          artifact = match['artifact']
          grype_data.append({
              'CVE ID': vuln['id'],
              'Package Name': artifact['name'],
              'Installed Version': artifact['version'],
              'Severity': vuln['severity'],
              'Description': vuln.get('description', ''),
              'Fixed Version': vuln.get('fixed_in_version', ''),
              'Found by Scanner': ['Grype'],
              'Link to More Information': vuln.get('links', [''])[0]
          })

      # Save processed data
      pd.DataFrame(grype_data).to_json('reports/processed_grype_report.json', orient='records', indent=4)
      EOF
  artifacts:
    paths:
      - reports/processed_grype_report.json
  dependencies:
    - grype-scan
  allow_failure: true

process-clair:
  stage: static security scan report process
  needs: [clair-scan]
  image: quay.io/bastiaanvanderbijl/python:3.12.3-slim
  script:
    - pip install pandas
    - |
      python - <<EOF
      import json
      import pandas as pd

      def load_json_report(file_path):
          with open(file_path) as f:
              return json.load(f)

      # Load the Clair report
      clair_report = load_json_report('reports/clair-report.json')

      # Process Clair report
      clair_vulns = clair_report['vulnerabilities']
      clair_data = []
      for vuln_id, vuln_details in clair_vulns.items():
          package_id = vuln_details['package']['id']
          package_name = clair_report['packages'][package_id]['name'] if package_id in clair_report['packages'] else vuln_details['package']['name']
          package_version = clair_report['packages'][package_id]['version'] if package_id in clair_report['packages'] else vuln_details['package']['version']
      
          clair_data.append({
              'CVE ID': vuln_details['name'],
              'Package Name': package_name,
              'Installed Version': package_version,
              'Severity': vuln_details['normalized_severity'],
              'Description': vuln_details.get('description', ''),
              'Fixed Version': vuln_details.get('fixed_in_version', ''),
              'Found by Scanner': ['Clair'],
              'Link to More Information': vuln_details.get('links', '')
          })

      # Save processed data
      pd.DataFrame(clair_data).to_json('reports/processed_clair_report.json', orient='records', indent=4)
      EOF
  artifacts:
    paths:
      - reports/processed_clair_report.json
  dependencies:
    - clair-scan
  allow_failure: true

process-trivy:
  stage: static security scan report process
  needs: [trivy-scan]
  image: quay.io/bastiaanvanderbijl/python:3.12.3-slim
  script:
    - pip install pandas
    - |
      python - <<EOF
      import json
      import pandas as pd

      def load_json_report(file_path):
          with open(file_path) as f:
              return json.load(f)

      # Load the Trivy report
      trivy_report = load_json_report('reports/trivy-report.json')

      # Process Trivy report
      trivy_vulns = trivy_report['Results']
      trivy_data = []
      for result in trivy_vulns:
          for vuln in result['Vulnerabilities']:
              trivy_data.append({
                  'CVE ID': vuln['VulnerabilityID'],
                  'Package Name': vuln['PkgName'],
                  'Installed Version': vuln['InstalledVersion'],
                  'Severity': vuln['Severity'],
                  'Description': vuln.get('Description', ''),
                  'Fixed Version': vuln.get('FixedVersion', ''),
                  'Found by Scanner': ['Trivy'],
                  'Link to More Information': vuln.get('PrimaryURL', '')
              })

      # Save processed data
      pd.DataFrame(trivy_data).to_json('reports/processed_trivy_report.json', orient='records', indent=4)
      EOF
  artifacts:
    paths:
      - reports/processed_trivy_report.json
  dependencies:
    - trivy-scan
  allow_failure: true

combine-static-security-reports:
  stage: static security scan report combine
  needs:
    - process-trivy
    - process-clair
    - process-grype
  image: quay.io/bastiaanvanderbijl/python:3.12.3-slim
  script:
    - pip install pandas
    - |
      python - <<EOF
      import json
      import pandas as pd
      from collections import defaultdict

      def load_json_report(file_path):
          with open(file_path) as f:
              return json.load(f)

      # Load the processed reports
      grype_data = load_json_report('reports/processed_grype_report.json')
      clair_data = load_json_report('reports/processed_clair_report.json')
      trivy_data = load_json_report('reports/processed_trivy_report.json')

      # Combine all data
      all_data = grype_data + clair_data + trivy_data

      # Merge data by CVE ID, ensuring no duplicates
      merged_data = defaultdict(dict)
      for entry in all_data:
          cve_id = entry['CVE ID']
          if cve_id in merged_data:
              for key, value in entry.items():
                  if key == 'Found by Scanner':
                      merged_data[cve_id][key] = list(set(merged_data[cve_id][key] + value))
                  elif not merged_data[cve_id].get(key) or merged_data[cve_id][key] in ['', 'unknown', 'Unknown']:
                      merged_data[cve_id][key] = value
          else:
              merged_data[cve_id] = entry

      # Convert to list for DataFrame
      merged_data_list = list(merged_data.values())

      # Create dataframe
      df_combined = pd.DataFrame(merged_data_list)

      # Convert combined dataframe to JSON
      combined_json = df_combined.to_json(orient='records', indent=4)

      # Save to a file
      output_path = 'reports/combined_cve_report.json'
      with open(output_path, 'w') as f:
          f.write(combined_json)

      EOF
  artifacts:
    paths:
      - reports/combined_cve_report.json
  dependencies:
    - process-grype
    - process-clair
    - process-trivy
  allow_failure: true

# SBOM scan
syft-scan:
  stage: sbom scan
  needs: [initialize-job]
  services:
    - name: docker:26.1.3-dind
      alias: docker-dind-syft
  variables:
    DOCKER_HOST: tcp://docker-dind-syft:2375/
  script:
    - mkdir -p reports
    - docker run --rm quay.io/bastiaanvanderbijl/syft $IMAGE_NAME:$IMAGE_TAG --scope all-layers -o json > reports/syft-report.json
  artifacts:
    paths:
      - reports/
  allow_failure: false

process-syft:
  stage: sbom report process
  needs:
    - syft-scan
  image: quay.io/bastiaanvanderbijl/python:3.12.3-slim
  script:
    - pip install pandas
    - |
      python - <<EOF
      import json
      import pandas as pd

      def load_json_report(file_path):
          with open(file_path) as f:
              return json.load(f)

      # Load the Syft report
      syft_report = load_json_report('reports/syft-report.json')

      # Process Syft report
      packages_data = []
      files_data = []

      # Extract distro information
      distro_data = syft_report.get('distro', {})

      # Process packages data
      for artifact in syft_report['artifacts']:
          packages_data.append({
              'name': artifact['name'],
              'version': artifact['version'],
              'type': artifact['type'],
              'architecture': artifact['metadata'].get('architecture', None),
              'maintainer': artifact['metadata'].get('maintainer', None),
              'installedSize': artifact['metadata'].get('installedSize', None),
              'locations': [location['path'] for location in artifact['locations']]
          })

      # Process files data
      for file in syft_report.get('files', []):
          files_data.append({
              'path': file.get('location', {}).get('path', None),
              'mode': file.get('metadata', {}).get('mode', None),
              'type': file.get('metadata', {}).get('type', None),
              'userid': file.get('metadata', {}).get('userID', None),
              'groupid': file.get('metadata', {}).get('groupID', None),
              'mimeType': file.get('metadata', {}).get('mimeType', None),
              'size': file.get('metadata', {}).get('size', None)
          })

      # Save processed data
      processed_data = {
          'packages': packages_data,
          'files': files_data,
          'distro': distro_data
      }
      with open('reports/processed_syft_report.json', 'w') as f:
          json.dump(processed_data, f, indent=4)
      EOF
  artifacts:
    paths:
      - reports/processed_syft_report.json
  dependencies:
    - syft-scan
  allow_failure: false




# Dockle scan
dockle-scan:
  stage: dockle scan
  needs: [initialize-job]
  services:
    - name: docker:26.1.3-dind
      alias: docker-dind-dockle
  variables:
    DOCKER_HOST: tcp://docker-dind-dockle:2375/
  script:
    - mkdir -p reports
    - docker run --rm -v $(pwd)/reports:/tmp/reports quay.io/bastiaanvanderbijl/dockle -f json -o /tmp/reports/dockle-report.json $IMAGE_NAME:$IMAGE_TAG
  artifacts:
    paths:
      - reports/
  allow_failure: true


# Final combine
final-combine:
  stage: final combine
  needs:
    - combine-static-security-reports
    - dockle-scan
    - process-syft
  image: quay.io/bastiaanvanderbijl/python:3.12.3-slim
  script:
    - pip install pandas
    - |
      python - <<EOF
      import json
      import pandas as pd

      def load_json_report(file_path):
          with open(file_path) as f:
              return json.load(f)

      # Load the combined reports
      static_security_data = load_json_report('reports/combined_cve_report.json')
      sbom_data = load_json_report('reports/processed_syft_report.json')
      dockle_data = load_json_report('reports/dockle-report.json')

      # Combine all data into one final report
      final_combined_data = {
          'image': "$IMAGE_NAME",
          'version': "$IMAGE_TAG",
          'vulnerabilities': static_security_data,
          'sbom': sbom_data,
          'container_image_linter': dockle_data
      }

      # Save the final combined report
      output_path = 'reports/final_combined_report.json'
      with open(output_path, 'w') as f:
          json.dump(final_combined_data, f, indent=4)

      EOF
  artifacts:
    paths:
      - reports/final_combined_report.json
  dependencies:
    - combine-static-security-reports
    - process-syft
    - dockle-scan
  allow_failure: true
